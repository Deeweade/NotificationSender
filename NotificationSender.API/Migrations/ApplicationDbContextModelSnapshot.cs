// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationSender.Infrastructure.Contexts;

#nullable disable

namespace NotificationSender.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NotificationSender.Domain.Entities.ConsumerSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DefaultNotificationChannelId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultRedirectEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultSenderPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultNotificationChannelId");

                    b.ToTable("ClientSystems");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationChannels");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChannelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RedirectNotifications")
                        .HasColumnType("bit");

                    b.Property<int>("SystemEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemEventId");

                    b.ToTable("NotificationRequests");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatus");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationChannelId");

                    b.HasIndex("SystemEventId");

                    b.ToTable("NotificationTemplates");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.SentNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificaitonStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationChannelId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SenderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsedRecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationChannelId");

                    b.HasIndex("NotificationRequestId");

                    b.HasIndex("NotificationStatusId");

                    b.ToTable("SentNotifications");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.SystemEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsumerSystemId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerSystemId");

                    b.ToTable("SystemEvents");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.ConsumerSystem", b =>
                {
                    b.HasOne("NotificationSender.Domain.Entities.NotificationChannel", "DefaultNotificationChannel")
                        .WithMany("ClientSystems")
                        .HasForeignKey("DefaultNotificationChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultNotificationChannel");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationRequest", b =>
                {
                    b.HasOne("NotificationSender.Domain.Entities.SystemEvent", "SystemEvent")
                        .WithMany("NotificationRequests")
                        .HasForeignKey("SystemEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemEvent");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationTemplate", b =>
                {
                    b.HasOne("NotificationSender.Domain.Entities.NotificationChannel", "NotificationChannel")
                        .WithMany("Templates")
                        .HasForeignKey("NotificationChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NotificationSender.Domain.Entities.SystemEvent", "SystemEvent")
                        .WithMany("NotificationTemplates")
                        .HasForeignKey("SystemEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationChannel");

                    b.Navigation("SystemEvent");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.SentNotification", b =>
                {
                    b.HasOne("NotificationSender.Domain.Entities.NotificationChannel", "NotificationChannel")
                        .WithMany("SentNotifications")
                        .HasForeignKey("NotificationChannelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NotificationSender.Domain.Entities.NotificationRequest", "NotificationRequest")
                        .WithMany("SentNotifications")
                        .HasForeignKey("NotificationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationSender.Domain.Entities.NotificationStatus", "NotificationStatus")
                        .WithMany("SendNotifications")
                        .HasForeignKey("NotificationStatusId");

                    b.Navigation("NotificationChannel");

                    b.Navigation("NotificationRequest");

                    b.Navigation("NotificationStatus");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.SystemEvent", b =>
                {
                    b.HasOne("NotificationSender.Domain.Entities.ConsumerSystem", "ConsumerSystem")
                        .WithMany("SystemEvents")
                        .HasForeignKey("ConsumerSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumerSystem");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.ConsumerSystem", b =>
                {
                    b.Navigation("SystemEvents");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationChannel", b =>
                {
                    b.Navigation("ClientSystems");

                    b.Navigation("SentNotifications");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationRequest", b =>
                {
                    b.Navigation("SentNotifications");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.NotificationStatus", b =>
                {
                    b.Navigation("SendNotifications");
                });

            modelBuilder.Entity("NotificationSender.Domain.Entities.SystemEvent", b =>
                {
                    b.Navigation("NotificationRequests");

                    b.Navigation("NotificationTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
